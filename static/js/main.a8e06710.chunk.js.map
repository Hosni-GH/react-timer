{"version":3,"sources":["ReactTimer.js","App.js","serviceWorker.js","index.js"],"names":["msToTime","s","document","getElementById","value","secs","mins","hrs","innerHTML","ReactTimer","className","id","type","name","onKeyUp","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPACA,SAASA,IACP,IAAIC,EAAEC,SAASC,eAAe,cAAcC,MAGxCC,GADJJ,GAAKA,EADIA,EAAI,KACE,KACA,GAEXK,GADJL,GAAKA,EAAII,GAAQ,IACF,GACXE,GAAON,EAAIK,GAAQ,GACvBC,EAAIA,EAAI,GAAM,IAAIA,EAAMA,EACxBD,EAAKA,EAAK,GAAM,IAAIA,EAAOA,EAC3BD,EAAKA,EAAK,GAAM,IAAIA,EAAOA,EAC3BH,SAASC,eAAe,SAASK,UAAWD,EAC5CL,SAASC,eAAe,WAAWK,UAAWF,EAC9CJ,SAASC,eAAe,YAAYK,UAAWH,E,IAyBlCI,E,iLAnBP,OAAS,yBAAKC,UAAU,kBACZ,yBAAKA,UAAU,iBACX,+BAAO,sFACP,2BAAOC,GAAG,aAAaC,KAAK,SAASC,KAAK,KAAMC,QAASd,KAE7D,yBAAKU,UAAU,yBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,SAAT,MAA0B,0BAAMD,UAAU,aAAhB,UACvD,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,SAAT,KAAyB,0BAAMD,UAAU,aAAhB,MACtD,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,WAAT,MAA4B,0BAAMD,UAAU,aAAhB,YACzD,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,SAAT,KAAyB,0BAAMD,UAAU,aAAhB,MACtD,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,YAAT,MAA6B,0BAAMD,UAAU,aAAhB,oB,GAf7DK,aCJVC,MARf,WACE,OACE,yBAAKN,UAAU,OACX,kBAAC,EAAD,QCKYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASC,eAAe,SD2H3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a8e06710.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nfunction msToTime() {\r\n  var s=document.getElementById(\"time-in-ms\").value;\r\n  var ms = s % 1000;\r\n  s = (s - ms) / 1000;\r\n  var secs = s % 60;\r\n  s = (s - secs) / 60;\r\n  var mins = s % 60;\r\n  var hrs = (s - mins) / 60; \r\n  hrs=hrs<10 ? (\"0\"+hrs): hrs;\r\n  mins=mins<10 ? (\"0\"+mins): mins;\r\n  secs=secs<10 ? (\"0\"+secs): secs;\r\n  document.getElementById(\"hours\").innerHTML= hrs\r\n  document.getElementById(\"minutes\").innerHTML= mins;\r\n  document.getElementById(\"secondes\").innerHTML= secs;\r\n}\r\nclass ReactTimer extends Component {\r\n    \r\n    render() { \r\n        \r\n        return ( <div className=\"main-container\">\r\n                    <div className=\"inputDivision\">\r\n                        <label><h1>Pour commencer merci d'ecrire un nbr en millisecondes</h1></label>\r\n                        <input id=\"time-in-ms\" type=\"number\" name=\"ms\"  onKeyUp={msToTime}/>\r\n                    </div>\r\n                    <div className=\"main-container-output\">\r\n                        <div className=\"output\">\r\n                            <div className=\"output-flex\"><span id=\"hours\">00</span><span className=\"date-text\">Hours</span></div>\r\n                            <div className=\"output-flex\"><span id=\"hours\">:</span><span className=\"date-text\">:</span></div>\r\n                            <div className=\"output-flex\"><span id=\"minutes\">00</span><span className=\"date-text\">Minutes</span></div>\r\n                            <div className=\"output-flex\"><span id=\"hours\">:</span><span className=\"date-text\">:</span></div>\r\n                            <div className=\"output-flex\"><span id=\"secondes\">00</span><span className=\"date-text\">Secondes</span></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ReactTimer;","import React from 'react';\nimport './App.css';\nimport ReactTimer from './ReactTimer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ReactTimer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}